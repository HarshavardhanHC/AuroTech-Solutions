class Transaction:
    def __init__(self, transaction_type, amount, source, destination=None):
        self.transaction_type = transaction_type
        self.amount = amount
        self.source = source
        self.destination = destination

    def __str__(self):
        if self.transaction_type == "Deposit":
            return f"{self.transaction_type}: +RS{self.amount}"
        elif self.transaction_type == "Withdrawal":
            return f"{self.transaction_type}: -RS{self.amount}"
        elif self.transaction_type == "Transfer":
            return f"{self.transaction_type}: -RS{self.amount} to {self.destination}"
class TransactionHistory:
    def __init__(self):
        self.history = []

    def add_transaction(self, transaction):
        self.history.append(transaction)

    def get_transaction_history(self):
        return self.history
class Account:
    def __init__(self, user):
        self.user = user
        self.balance = 0
        self.transaction_history = TransactionHistory()

    def deposit(self, amount):
        self.balance += amount
        transaction = Transaction("Deposit", amount, self.user.user_id)
        self.transaction_history.add_transaction(transaction)

    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds")
        else:
            self.balance -= amount
            transaction = Transaction("Withdrawal", amount, self.user.user_id)
            self.transaction_history.add_transaction(transaction)

    def transfer(self, amount, recipient_account):
        if amount > self.balance:
            print("Insufficient funds")
        else:
            self.balance -= amount
            recipient_account.balance += amount
            transaction_outgoing = Transaction("Transfer", amount, self.user.user_id, recipient_account.user.user_id)
            transaction_incoming = Transaction("Transfer", amount, recipient_account.user.user_id, self.user.user_id)
            self.transaction_history.add_transaction(transaction_outgoing)
            recipient_account.transaction_history.add_transaction(transaction_incoming)
class User:
    def __init__(self, user_id, pin):
        self.user_id = user_id
        self.pin = pin
        self.account = Account(self)

class ATM:
    def __init__(self):
        self.users = {}
        self.logged_in_user = None

    def add_user(self, user_id, pin):
        if user_id not in self.users:
            self.users[user_id] = User(user_id, pin)
            print("User added successfully.")
        else:
            print("User already exists.")

    def login(self, user_id, pin):
        if user_id in self.users and self.users[user_id].pin == pin:
            self.logged_in_user = self.users[user_id]
            print("Login successful.")
        else:
            print("Invalid user ID or PIN.")

    def display_menu(self):
        if self.logged_in_user:
            print("1. View Transaction History")
            print("2. Deposit")
            print("3. Withdraw")
            print("4. Transfer")
            print("5. Quit")
        else:
            print("Please login first.")

    def start(self):
        while True:
            self.display_menu()
            choice = input("Enter your choice: ")

            if not self.logged_in_user:
                print("Please login first.")
                continue

            if choice == "1":
                print("\nTransaction History:")
                for transaction in self.logged_in_user.account.transaction_history.get_transaction_history():
                    print(transaction)

            elif choice == "2":
                amount = float(input("Enter deposit amount: RS"))
                self.logged_in_user.account.deposit(amount)
                print("Deposit successful.")

            elif choice == "3":
                amount = float(input("Enter withdrawal amount: RS"))
                self.logged_in_user.account.withdraw(amount)

            elif choice == "4":
                recipient_id = input("Enter recipient's user ID: ")
                if recipient_id in self.users:
                    recipient_account = self.users[recipient_id].account
                    amount = float(input("Enter transfer amount: RS"))
                    self.logged_in_user.account.transfer(amount, recipient_account)
                    print("Transfer successful.")
                else:
                    print("Recipient user ID not found.")

            elif choice == "5":
                print("Thank you for using the ATM.")
                break

            else:
                print("Invalid choice. Please try again.")


# Example Usage
print("Welcome")
atm = ATM()
atm.add_user("12345", "6789")  #Add user with id - 12345
atm.add_user("1234", "6789")   #Another user
atm.login("12345", "6789")     #login to ATM interface
atm.start()                     #start 
